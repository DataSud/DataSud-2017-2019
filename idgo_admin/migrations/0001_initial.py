# -*- coding: utf-8 -*-
# Generated by Django 1.11.25 on 2019-11-19 12:59
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import idgo_admin.models.resource
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountActions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='Clé')),
                ('action', models.CharField(blank=True, choices=[('confirm_mail', "Confirmation de l'e-mail par l'utilisateur"), ('confirm_new_organisation', "Confirmation par un administrateur de la création d'une organisation par l'utilisateur"), ('confirm_rattachement', "Rattachement d'un utilisateur à une organisation par un administrateur"), ('confirm_referent', "Confirmation du rôle de réferent d'une organisation pour un utilisateur par un administrateur"), ('confirm_contribution', "Confirmation du rôle de contributeur d'une organisation pour un utilisateur par un administrateur"), ('reset_password', 'Réinitialisation du mot de passe'), ('set_password_admin', 'Initialisation du mot de passe suite à une inscription par un administrateur'), ('created_organisation_through_api', "Création d'une organisation depuis l'API")], default='confirm_mail', max_length=250, null=True, verbose_name='Action de gestion de profile')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date de création')),
                ('closed', models.DateTimeField(blank=True, null=True, verbose_name='Date de validation')),
            ],
        ),
        migrations.CreateModel(
            name='AsyncExtractorTask',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('foreign_value', models.CharField(blank=True, max_length=100, null=True)),
                ('foreign_field', models.CharField(blank=True, max_length=100, null=True)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
                ('success', models.NullBooleanField()),
                ('submission_datetime', models.DateTimeField(blank=True, null=True)),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('stop_datetime', models.DateTimeField(blank=True, null=True)),
                ('query', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Tâche exécutée par l'extracteur de données",
                'verbose_name_plural': "Tâches exécutées par l'extracteur de données",
            },
        ),
        migrations.CreateModel(
            name='BaseMaps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True, verbose_name='Nom')),
                ('url', models.URLField(verbose_name='URL')),
                ('options', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='Options')),
            ],
            options={
                'verbose_name': 'Fond cartographique',
                'verbose_name_plural': 'Fonds cartographiques',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='Slug')),
                ('ckan_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='Identifiant CKAN')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('alternate_titles', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, null=True, size=None, verbose_name='Autres titres')),
                ('description', models.CharField(max_length=1024, verbose_name='Description')),
                ('iso_topic', models.CharField(blank=True, choices=[('farming', 'Agriculture'), ('biota', 'Flore et faune'), ('boundaries', 'Limites politiques et administratives'), ('climatologyMeteorologyAtmosphere', 'Climatologie, météorologie'), ('economy', 'Economie'), ('elevation', 'Topographie'), ('environment', 'Ressources et gestion de l’environnement'), ('geoscientificInformation', 'Géosciences'), ('health', 'Santé'), ('imageryBaseMapsEarthCover', 'Carte de référence de la couverture terrestre'), ('intelligenceMilitary', 'Infrastructures militaires'), ('inlandWaters', 'Hydrographie'), ('location', 'Localisant'), ('oceans', 'Océans'), ('planningCadastre', 'Planification et aménagement du territoire'), ('society', 'Société'), ('structure', 'Aménagements urbains'), ('transportation', 'Infrastructures de transport'), ('utilitiesCommunication', 'Réseaux de télécommunication, d’énergie')], max_length=100, null=True, verbose_name='Thème ISO')),
                ('picto', models.ImageField(blank=True, null=True, upload_to='logos/', verbose_name='Pictogramme')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
            },
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('code', models.CharField(max_length=5, primary_key=True, serialize=False, verbose_name='Code INSEE')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4171, verbose_name='Géometrie')),
            ],
            options={
                'ordering': ('code',),
                'verbose_name': 'Commune',
                'verbose_name_plural': 'Communes',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='Titre')),
                ('slug', models.SlugField(blank=True, error_messages={'invalid': "Le label court ne peut contenir ni majuscule, ni caractères spéciaux à l'exception le tiret."}, max_length=100, null=True, unique=True, verbose_name='Slug')),
                ('ckan_id', models.UUIDField(blank=True, db_index=True, editable=False, null=True, unique=True, verbose_name='Identifiant CKAN')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='thumbnails/', verbose_name='Illustration')),
                ('date_creation', models.DateField(blank=True, null=True, verbose_name='Date de création')),
                ('date_modification', models.DateField(blank=True, null=True, verbose_name='Date de dernière modification')),
                ('date_publication', models.DateField(blank=True, null=True, verbose_name='Date de publication')),
                ('update_frequency', models.CharField(choices=[('asneeded', 'Lorsque nécessaire'), ('never', 'Non planifiée'), ('intermittently', 'Irrégulière'), ('continuously', 'Continue'), ('realtime', 'Temps réel'), ('daily', 'Journalière'), ('weekly', 'Hebdomadaire'), ('fortnightly', 'Bi-mensuelle'), ('monthly', 'Mensuelle'), ('quarterly', 'Trimestrielle'), ('semiannual', 'Bi-annuelle'), ('annual', 'Annuelle'), ('unknown', 'Inconnue')], default='never', max_length=30, verbose_name='Fréquence de mise à jour')),
                ('geocover', models.CharField(blank=True, choices=[(None, 'Indéfinie'), ('regionale', 'Régionale'), ('jurisdiction', 'Territoire de compétence')], default=None, max_length=30, null=True, verbose_name='Couverture géographique')),
                ('owner_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nom du producteur')),
                ('owner_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Adresse e-mail du producteur')),
                ('broadcaster_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nom du diffuseur')),
                ('broadcaster_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Adresse e-mail du diffuseur')),
                ('published', models.BooleanField(default=False, verbose_name='Publier le jeu de données')),
                ('geonet_id', models.TextField(blank=True, db_index=True, null=True, unique=True, verbose_name='Identifiant de la fiche de métadonnées')),
                ('bbox', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4171, verbose_name='Rectangle englobant')),
                ('categories', models.ManyToManyField(blank=True, to='idgo_admin.Category', verbose_name='Catégories')),
            ],
            options={
                'verbose_name': 'Jeu de données',
                'verbose_name_plural': 'Jeux de données',
            },
        ),
        migrations.CreateModel(
            name='DataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='Slug')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('description', models.CharField(max_length=1024, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Type de donnée',
                'verbose_name_plural': 'Types de données',
            },
        ),
        migrations.CreateModel(
            name='ExtractorSupportedFormat',
            fields=[
                ('name', models.SlugField(editable=False, primary_key=True, serialize=False, verbose_name='Nom')),
                ('description', models.TextField(unique=True, verbose_name='Description')),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='Détails')),
                ('type', models.CharField(blank=True, choices=[('raster', 'raster'), ('vector', 'vector')], max_length=6, null=True, verbose_name='Type')),
            ],
            options={
                'verbose_name': "Format pris en charge par le service d'extraction",
                'verbose_name_plural': "Formats pris en charge par le service d'extraction",
            },
        ),
        migrations.CreateModel(
            name='Gdpr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('issue_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date d'émission")),
            ],
            options={
                'verbose_name': "Modalités et conditions d'utilisation (RGPD)",
            },
        ),
        migrations.CreateModel(
            name='GdprUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('validated_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Date de validation')),
                ('gdpr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Gdpr', verbose_name='RGPD')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'RGPD / Utilisateur',
            },
        ),
        migrations.CreateModel(
            name='Granularity',
            fields=[
                ('slug', models.SlugField(blank=True, max_length=100, primary_key=True, serialize=False, unique=True, verbose_name='Slug')),
                ('name', models.TextField(verbose_name='Nom')),
                ('order', models.IntegerField(blank=True, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Granularité de la couverture territoriale',
                'verbose_name_plural': 'Granularités des couvertures territoriales',
            },
        ),
        migrations.CreateModel(
            name='Jurisdiction',
            fields=[
                ('code', models.CharField(max_length=10, primary_key=True, serialize=False, verbose_name='Code INSEE')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4171, verbose_name='Géometrie')),
            ],
            options={
                'verbose_name': 'Territoire de compétence',
                'verbose_name_plural': 'Territoires de compétence',
            },
        ),
        migrations.CreateModel(
            name='JurisdictionCommune',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateField(auto_now_add=True, verbose_name='Créé le')),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Commune', verbose_name='Commune')),
            ],
            options={
                'verbose_name': 'Territoire de compétence / Commune',
                'verbose_name_plural': 'Territoires de compétence / Communes',
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('name', models.SlugField(editable=False, max_length=100, primary_key=True, serialize=False, verbose_name='Nom de la couche')),
                ('type', models.CharField(blank=True, choices=[('raster', 'raster'), ('vector', 'vector')], max_length=6, null=True, verbose_name='Type')),
                ('bbox', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4171, verbose_name='Rectangle englobant')),
            ],
            options={
                'verbose_name': 'Couche de données',
                'verbose_name_plural': 'Couches de données',
            },
        ),
        migrations.CreateModel(
            name='LiaisonsContributeurs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateField(auto_now_add=True, verbose_name='Date de la demande de statut de contributeur')),
                ('validated_on', models.DateField(blank=True, null=True, verbose_name='Date de la confirmation par un administrateur')),
            ],
            options={
                'verbose_name': 'Statut de contributeur',
                'verbose_name_plural': 'Statuts de contributeur',
            },
        ),
        migrations.CreateModel(
            name='LiaisonsReferents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateField(auto_now_add=True, verbose_name='Date de la demande de statut de référent')),
                ('validated_on', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Date de la confirmation par un administrateur')),
            ],
            options={
                'verbose_name': 'Statut de référent',
                'verbose_name_plural': 'Statuts de référent',
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('slug', models.SlugField(blank=True, max_length=100, primary_key=True, serialize=False, unique=True, verbose_name='Slug')),
                ('title', models.TextField(verbose_name='Titre')),
                ('alternate_titles', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, null=True, size=None, verbose_name='Autres titres')),
                ('url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('alternate_urls', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, null=True, size=None, verbose_name='Autres URLs')),
                ('domain_content', models.BooleanField(default=False, verbose_name='Domain Content')),
                ('domain_data', models.BooleanField(default=False, verbose_name='Domain Data')),
                ('domain_software', models.BooleanField(default=False, verbose_name='Domain Software')),
                ('status', models.CharField(choices=[('active', 'Active'), ('deleted', 'Deleted')], default='active', max_length=7, verbose_name='Status')),
                ('maintainer', models.TextField(blank=True, null=True, verbose_name='Maintainer')),
                ('od_conformance', models.CharField(choices=[('approved', 'Approved'), ('not reviewed', 'Not reviewed'), ('rejected', 'Rejected')], default='not reviewed', max_length=30, verbose_name='Open Definition Conformance')),
                ('osd_conformance', models.CharField(choices=[('approved', 'Approved'), ('not reviewed', 'Not reviewed'), ('rejected', 'Rejected')], default='not reviewed', max_length=30, verbose_name='Open Source Definition Conformance')),
            ],
            options={
                'verbose_name': 'Licence',
                'verbose_name_plural': 'Licences',
            },
        ),
        migrations.CreateModel(
            name='Mail',
            fields=[
                ('template_name', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='Identifiant')),
                ('subject', models.CharField(blank=True, max_length=255, null=True, verbose_name='Objet')),
                ('message', models.TextField(blank=True, null=True, verbose_name='Corps du message')),
            ],
            options={
                'verbose_name': 'E-mail',
                'verbose_name_plural': 'E-mails',
            },
        ),
        migrations.CreateModel(
            name='MappingCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(null=True, verbose_name='Slug')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Category')),
            ],
            options={
                'verbose_name': 'Mapping categorie',
                'verbose_name_plural': 'Mapping categories',
            },
        ),
        migrations.CreateModel(
            name='MappingLicence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(null=True, verbose_name='Slug')),
                ('licence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.License')),
            ],
            options={
                'verbose_name': 'Mapping license',
                'verbose_name_plural': 'Mapping licenses',
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legal_name', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='Dénomination sociale')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('ckan_id', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='Ckan UUID')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Site internet')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Adresse e-mail')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos/', verbose_name='Logo')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Adresse')),
                ('postcode', models.CharField(blank=True, max_length=100, null=True, verbose_name='Code postal')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ville')),
                ('phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='Téléphone')),
                ('is_active', models.BooleanField(default=False, verbose_name='Organisation active')),
                ('is_crige_partner', models.BooleanField(default=False, verbose_name='Organisation partenaire du CRIGE')),
                ('geonet_id', models.TextField(blank=True, db_index=True, null=True, unique=True, verbose_name='UUID de la métadonnées')),
                ('jurisdiction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Jurisdiction', verbose_name='Territoire de compétence')),
                ('license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.License', verbose_name='Licence')),
            ],
            options={
                'ordering': ('slug',),
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
            },
        ),
        migrations.CreateModel(
            name='OrganisationType',
            fields=[
                ('code', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='Code')),
                ('name', models.TextField(verbose_name="Type d'organisation")),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': "Type d'organisation",
                'verbose_name_plural': "Types d'organisations",
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='Téléphone')),
                ('is_active', models.BooleanField(default=False, verbose_name='Validation suite à confirmation mail par utilisateur')),
                ('membership', models.BooleanField(default=False, verbose_name='Utilisateur rattaché à une organisation')),
                ('crige_membership', models.BooleanField(default=False, verbose_name='Utilisateur affilié au CRIGE')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Administrateur métier')),
                ('sftp_password', models.CharField(blank=True, max_length=10, null=True, verbose_name='Mot de passe sFTP')),
                ('contributions', models.ManyToManyField(related_name='profile_contributions', through='idgo_admin.LiaisonsContributeurs', to='idgo_admin.Organisation', verbose_name="Organisations dont l'utilisateur est contributeur")),
                ('organisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='idgo_admin.Organisation', verbose_name="Organisation d'appartenance")),
                ('referents', models.ManyToManyField(related_name='profile_referents', through='idgo_admin.LiaisonsReferents', to='idgo_admin.Organisation', verbose_name="Organisations dont l'utilisateur est réferent")),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil utilisateur',
                'verbose_name_plural': 'Profils des utilisateurs',
            },
        ),
        migrations.CreateModel(
            name='RemoteCkan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, verbose_name='URL')),
                ('sync_with', django.contrib.postgres.fields.ArrayField(base_field=models.SlugField(max_length=100), blank=True, null=True, size=None, verbose_name='Organisations synchronisées')),
                ('sync_frequency', models.CharField(blank=True, choices=[('never', 'Jamais'), ('daily', 'Quotidienne (tous les jours à minuit)'), ('weekly', 'Hebdomadaire (tous les lundi)'), ('bimonthly', 'Bimensuelle (1er et 15 de chaque mois)'), ('monthly', 'Mensuelle (1er de chaque mois)'), ('quarterly', 'Trimestrielle (1er des mois de janvier, avril, juillet, octobre)'), ('biannual', 'Semestrielle (1er janvier et 1er juillet)'), ('annual', 'Annuelle (1er janvier)')], default='never', max_length=20, null=True, verbose_name='Fréquence de synchronisation')),
                ('organisation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Organisation')),
            ],
            options={
                'verbose_name': 'Catalogue CKAN distant',
                'verbose_name_plural': 'Catalogues CKAN distants',
            },
        ),
        migrations.CreateModel(
            name='RemoteCkanDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remote_dataset', models.UUIDField(blank=True, editable=False, null=True, unique=True, verbose_name='Ckan UUID')),
                ('remote_organisation', models.SlugField(blank=True, max_length=100, null=True, verbose_name='Organisation distante')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_on', models.DateTimeField(auto_now_add=True, verbose_name='Mis-à-jour le')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creates_dataset_from_remote_ckan', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Dataset')),
                ('remote_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.RemoteCkan')),
            ],
            options={
                'verbose_name': 'Jeu de données moissonné',
                'verbose_name_plural': 'Jeux de données moissonnés',
            },
        ),
        migrations.CreateModel(
            name='RemoteCsw',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, verbose_name='URL')),
                ('getrecords', models.TextField(blank=True, null=True, verbose_name='GetRecords')),
                ('sync_frequency', models.CharField(blank=True, choices=[('never', 'Jamais'), ('daily', 'Quotidienne (tous les jours à minuit)'), ('weekly', 'Hebdomadaire (tous les lundi)'), ('bimonthly', 'Bimensuelle (1er et 15 de chaque mois)'), ('monthly', 'Mensuelle (1er de chaque mois)'), ('quarterly', 'Trimestrielle (1er des mois de janvier, avril, juillet, octobre)'), ('biannual', 'Semestrielle (1er janvier et 1er juillet)'), ('annual', 'Annuelle (1er janvier)')], default='never', max_length=20, null=True, verbose_name='Fréquence de synchronisation')),
                ('organisation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Organisation')),
            ],
            options={
                'verbose_name': 'Catalogue CSW distant',
                'verbose_name_plural': 'Catalogues CSW distants',
            },
        ),
        migrations.CreateModel(
            name='RemoteCswDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remote_dataset', models.CharField(blank=True, editable=False, max_length=100, null=True, unique=True, verbose_name='Jeu de données distant')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_on', models.DateTimeField(auto_now_add=True, verbose_name='Mis-à-jour le')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creates_dataset_from_remote_csw', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Dataset')),
                ('remote_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.RemoteCsw')),
            ],
            options={
                'verbose_name': 'Jeu de données moissonné',
                'verbose_name_plural': 'Jeux de données moissonnés',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ckan_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Ckan UUID')),
                ('title', models.TextField(verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('ftp_file', models.FileField(blank=True, null=True, upload_to=idgo_admin.models.resource._ftp_file_upload_to, verbose_name='Fichier déposé sur FTP')),
                ('referenced_url', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Référencer une URL')),
                ('dl_url', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Télécharger depuis une URL')),
                ('up_file', models.FileField(blank=True, null=True, upload_to=idgo_admin.models.resource._up_file_upload_to, verbose_name='Téléverser un ou plusieurs fichiers')),
                ('lang', models.CharField(choices=[('french', 'Français'), ('english', 'Anglais'), ('italian', 'Italien'), ('german', 'Allemand'), ('other', 'Autre')], default='french', max_length=10, verbose_name='Langue')),
                ('restricted_level', models.CharField(blank=True, choices=[('public', 'Tous les utilisateurs'), ('registered', 'Utilisateurs authentifiés'), ('only_allowed_users', 'Utilisateurs authentifiés avec droits spécifiques'), ('same_organization', 'Utilisateurs de cette organisation uniquement'), ('any_organization', 'Organisations spécifiées')], default='public', max_length=20, null=True, verbose_name="Restriction d'accès")),
                ('bbox', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4171, verbose_name='Rectangle englobant')),
                ('geo_restriction', models.BooleanField(default=False, verbose_name='Restriction géographique')),
                ('extractable', models.BooleanField(default=True, verbose_name='Extractible')),
                ('ogc_services', models.BooleanField(default=True, verbose_name='Services OGC')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Date de création de la resource')),
                ('last_update', models.DateTimeField(blank=True, null=True, verbose_name='Date de dernière modification de la resource')),
                ('data_type', models.CharField(choices=[('raw', 'Données brutes'), ('annexe', 'Documentation associée'), ('service', 'Service')], default='raw', max_length=10, verbose_name='Type de la ressource')),
                ('synchronisation', models.BooleanField(default=False, verbose_name='Synchronisation de données distante')),
                ('sync_frequency', models.CharField(blank=True, choices=[('1hour', 'Toutes les heures'), ('3hours', 'Toutes les trois heures'), ('6hours', 'Toutes les six heures'), ('daily', 'Quotidienne (tous les jours à minuit)'), ('weekly', 'Hebdomadaire (tous les lundi)'), ('bimonthly', 'Bimensuelle (1er et 15 de chaque mois)'), ('monthly', 'Mensuelle (1er de chaque mois)'), ('quarterly', 'Trimestrielle (1er des mois de janvier, avril, juillet, octobre)'), ('biannual', 'Semestrielle (1er janvier et 1er juillet)'), ('annual', 'Annuelle (1er janvier)'), ('never', 'Jamais'), ('5mn', 'Toutes les 5 minutes'), ('15mn', 'Toutes les 15 minutes'), ('20mn', 'Toutes les 20 minutes'), ('30mn', 'Toutes les 30 minutes')], default='never', max_length=20, null=True, verbose_name='Fréquence de synchronisation')),
            ],
            options={
                'verbose_name': 'Ressource',
                'verbose_name_plural': 'Ressources',
            },
        ),
        migrations.CreateModel(
            name='ResourceFormats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(verbose_name='Description')),
                ('extension', models.CharField(max_length=10, verbose_name='Extension du fichier')),
                ('mimetype', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, null=True, size=None, verbose_name='Type MIME')),
                ('protocol', models.CharField(blank=True, max_length=100, null=True, verbose_name='Protocole')),
                ('ckan_format', models.CharField(max_length=10, verbose_name='Format CKAN')),
                ('ckan_view', models.CharField(blank=True, choices=[(None, 'N/A'), ('text_view', 'text_view'), ('geo_view', 'geo_view'), ('recline_view', 'recline_view'), ('pdf_view', 'pdf_view')], max_length=100, null=True, verbose_name='Vue CKAN')),
                ('is_gis_format', models.BooleanField(default=False, verbose_name='Format de fichier SIG')),
            ],
            options={
                'verbose_name': 'Format de ressource',
                'verbose_name_plural': 'Formats de ressource',
            },
        ),
        migrations.CreateModel(
            name='Support',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('description', models.CharField(max_length=1024, verbose_name='Description')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='Label court')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Adresse e-mail')),
            ],
            options={
                'verbose_name': 'Support technique',
                'verbose_name_plural': 'Supports techniques',
            },
        ),
        migrations.CreateModel(
            name='SupportedCrs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auth_name', models.CharField(db_index=True, default='EPSG', max_length=100, verbose_name='Authority Name')),
                ('auth_code', models.CharField(db_index=True, max_length=100, verbose_name='Authority Code')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('regex', models.TextField(blank=True, null=True, verbose_name='Expression régulière')),
            ],
            options={
                'verbose_name': "CRS supporté par l'application",
                'verbose_name_plural': "CRS supportés par l'application",
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(blank=True, db_index=True, editable=False, null=True, unique=True, verbose_name='Id')),
                ('action', models.TextField(blank=True, null=True, verbose_name='Action')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Extras')),
                ('state', models.CharField(choices=[('succesful', 'Tâche terminée avec succés'), ('failed', 'Echec de la tâche'), ('running', 'Tâche en cours de traitement')], default='running', max_length=20, verbose_name='État')),
                ('starting', models.DateTimeField(auto_now_add=True, verbose_name='Début du traitement')),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='Fin du traitement')),
            ],
            options={
                'verbose_name': 'Tâche de synchronisation',
                'verbose_name_plural': 'Tâches de synchronisation',
            },
        ),
        migrations.CreateModel(
            name='Keywords',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'verbose_name': 'Mot-clé',
                'verbose_name_plural': 'Mots-clés',
            },
            bases=('taggit.tag',),
        ),
        migrations.AddField(
            model_name='resource',
            name='crs',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='idgo_admin.SupportedCrs', verbose_name='CRS'),
        ),
        migrations.AddField(
            model_name='resource',
            name='dataset',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='idgo_admin.Dataset', verbose_name='Jeu de données'),
        ),
        migrations.AddField(
            model_name='resource',
            name='format_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.ResourceFormats', verbose_name='Format'),
        ),
        migrations.AddField(
            model_name='resource',
            name='organisations_allowed',
            field=models.ManyToManyField(blank=True, to='idgo_admin.Organisation', verbose_name='Organisations autorisées'),
        ),
        migrations.AddField(
            model_name='resource',
            name='profiles_allowed',
            field=models.ManyToManyField(blank=True, to='idgo_admin.Profile', verbose_name='Utilisateurs autorisés'),
        ),
        migrations.AddField(
            model_name='organisation',
            name='organisation_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='idgo_admin.OrganisationType', verbose_name="Type d'organisation"),
        ),
        migrations.AddField(
            model_name='mappinglicence',
            name='remote_ckan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.RemoteCkan'),
        ),
        migrations.AddField(
            model_name='mappingcategory',
            name='remote_ckan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.RemoteCkan'),
        ),
        migrations.AddField(
            model_name='liaisonsreferents',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Organisation', verbose_name='Organisation'),
        ),
        migrations.AddField(
            model_name='liaisonsreferents',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Profile', verbose_name='Profil utilisateur'),
        ),
        migrations.AddField(
            model_name='liaisonscontributeurs',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Organisation', verbose_name='Organisation'),
        ),
        migrations.AddField(
            model_name='liaisonscontributeurs',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Profile', verbose_name='Profil utilisateur'),
        ),
        migrations.AddField(
            model_name='layer',
            name='resource',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Resource', verbose_name='Ressource'),
        ),
        migrations.AddField(
            model_name='jurisdictioncommune',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creates_jurisdiction', to='idgo_admin.Profile', verbose_name='Créé par'),
        ),
        migrations.AddField(
            model_name='jurisdictioncommune',
            name='jurisdiction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Jurisdiction', verbose_name='Territoire de compétence'),
        ),
        migrations.AddField(
            model_name='jurisdiction',
            name='communes',
            field=models.ManyToManyField(related_name='jurisdiction_communes', through='idgo_admin.JurisdictionCommune', to='idgo_admin.Commune', verbose_name='Communes'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='data_type',
            field=models.ManyToManyField(blank=True, to='idgo_admin.DataType', verbose_name='Type de données'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='editor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Producteur (propriétaire)'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='granularity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='idgo_admin.Granularity', verbose_name='Granularité de la couverture territoriale'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='keywords',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Liste de mots-clés'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.License', verbose_name='Licence'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Organisation', verbose_name='Organisation'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='support',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Support', verbose_name='Support technique'),
        ),
        migrations.AddField(
            model_name='accountactions',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Organisation', verbose_name='Organisation'),
        ),
        migrations.AddField(
            model_name='accountactions',
            name='profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='idgo_admin.Profile'),
        ),
        migrations.AlterUniqueTogether(
            name='remotecswdataset',
            unique_together=set([('remote_instance', 'dataset')]),
        ),
        migrations.AlterUniqueTogether(
            name='remoteckandataset',
            unique_together=set([('remote_instance', 'dataset')]),
        ),
        migrations.AlterUniqueTogether(
            name='liaisonsreferents',
            unique_together=set([('profile', 'organisation')]),
        ),
        migrations.AlterUniqueTogether(
            name='liaisonscontributeurs',
            unique_together=set([('profile', 'organisation')]),
        ),
        migrations.AlterUniqueTogether(
            name='gdpruser',
            unique_together=set([('user', 'gdpr')]),
        ),
    ]
